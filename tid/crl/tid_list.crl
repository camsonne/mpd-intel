# 
#  User readout list using a TID as a trigger source
#
#    Bryan Moffit, TJNAF 2012
#

readout list GEN_USER
maximum 1024,512
general readout

# A24 Address for TID Module (0x100000 for VME Slot 2)
const TRIG_ADDR=0x100000
# TRIG_MODE=0 for interrupt mode
const TRIG_MODE=0

extern int bigendian_out;
extern unsigned tidIntCount;

############################################################
# DOWNLOAD
############################################################
begin download

# When sending to a Linux Host set bigendian_out = 0
bigendian_out = 0;

%%
  /* TID Setup */
  tidInit(TRIG_ADDR,TRIG_MODE,0);

  /* 
   * Set the trigger source:
   *  2: Front Panel TRG
   *  3: Front Panel TS Inputs
   *  5: Internal Pulser
   */
  tidSetTriggerSource(3);

  /* Set number of events per block */
  tidSetBlockLevel(1);

  /* 
   * For Front panel TS Inputs, 
   * - Enable TS Input #1 
   *
   * Unterminated Inputs MUST NOT be enabled.
   */
  tidDisableTSInput( TID_TSINPUT_ALL );
  tidEnableTSInput( TID_TSINPUT_1 );

  /* 
   * Load the trigger table that associates 
   *  TS#1 | TS#2 | TS#3 : trigger1
   *  TS#4 | TS#5 | TS#6 : trigger2 (playback trigger)
   */
  tidLoadTriggerTable();

  /* 
   * Trigger Holdoff rule "1":
   *  - No more than "1" trigger within "5"*16ns 
   *  Trigger Holdoff rule 2
   *  - No more than "2" triggers within "10"*16ns 
   */
  tidSetTriggerHoldoff(1,5);
  tidSetTriggerHoldoff(2,10);

  /* 
   * Set the Block Acknowledge threshold 
   *  0:  No threshold  -  Pipeline mode
   *  1:  One Acknowdge for each Block - "ROC LOCK" mode
   *  2-255:  "Buffered" mode.
   */
  tidSetBlockAckThreshold(1);

  /* Override the busy source set in tidInit */
  tidSetBusySource(TID_BUSY_LOOPBACK,1);

  /* Front panel trigger prescale: 2^<arg> */
  tidSetPrescale(0);

  /*  Set delay parameters to minimize trigger time out on front panel */
  tidSetFiberDelay(2,4);
  tidSetSyncDelayWidth(0x4, 0x3f);

%%

  log inform "User Download Executed"

end download
    
############################################################
# PRESTART
############################################################
begin prestart

  variable jj, adc_id

  log inform "Entering User Prestart"
%%
  /* Reset the TID Clock and Trigger Links at the START of Prestart */
  tidClockReset();
  taskDelay(2);
  tidSyncReset();
  taskDelay(2);
  tidTrigLinkReset();
%%

  init trig source GEN
  link async trig source GEN 1 to tidtrig and tidtrig_done
  event type 1 then read GEN 1

%%
  /* Enable FADCs here */

  /* Send a SYNC at the END of Prestart */
  tidSyncReset();
  taskDelay(2);

%%

  log inform "User Prestart Executed"

end prestart

############################################################
# END
############################################################
begin end

%%
  CDODISABLE(GEN,1,0);
  tidDisableRandomTrigger();

  tidStatus();
  printf("Interrupt Count: %8d \n",tidIntCount);
%%

  log inform "User End Executed"

end end

############################################################
# PAUSE
############################################################
begin pause

  CDODISABLE(GEN,1,0);

  log inform "User Pause Executed"

end pause

############################################################
# GO
############################################################
begin go
  
  log inform "Entering User Go"
  
%%
  tidStatus();
  CDOENABLE(GEN,1,0);

/* A couple ways to activate the 
/*   tidSoftTrig(0xffff,200,1); */
/*   tidSetRandomTrigger(7); /\* ~ 4kHz *\/ */
%%

  log inform "User Go Executed"

end go

############################################################
# TRIGGER
############################################################
begin trigger tidtrig
  variable dCnt,ii

  rol->dabufp = (long *) 0;
  open event type EVTYPE of BT_UI4

%%
  if(__the_event__ == (DANODE*)0)
    {
      logMsg("primary rol: error here\n");
    }

  if(rol->dabufp != NULL)
    {
      
      dCnt = tidReadBlock(rol->dabufp,900>>2,1);
      if(dCnt<=0)
	{
	  logMsg("No data or error.  dCnt = %d\n",dCnt);
	}
      else
	{
	  rol->dabufp += dCnt;
	}
    }
  else
    {
      logMsg("tid_list: ERROR: rol->dabufp is NULL\n");
    }

%%

 close event

end trigger

begin done tidtrig

end done

############################################################
# DONE (TRIGGER ACKNOWLEDGE)
############################################################
begin done
  CDOACK(GEN,1,0);
end done

begin status

end status


